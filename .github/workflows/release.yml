name: Release
on:
  workflow_dispatch:

env:
  CHART_VERSION: 1.2.1
  NAMESPACE: microservices
  STAGING_RELEASE_FILE: apps/staging/microservices/authentication/release.yaml
  PROD_RELEASE_FILE: apps/production/microservices/authentication/release.yaml

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: The-Quality-Group/service-authentication
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
      - uses: actions/checkout@v2
        with:
          repository: marvinkurock/ga
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          path: .github/actions
      - run: |
          tree -L 2
  create_release_candidate:
    needs: test-and-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/checkout@v2
        with:
          repository: marvinkurock/ga
          token: ${{ secrets.API_GITHUB_TOKEN }}
          path: .github/actions
      - uses: ./.github/actions/release/
        with:
          K8S_REPO: marvinkurock/k8s
          API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
          RELEASE_FILE: ${{ env.STAGING_RELEASE_FILE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  create_release:
    needs: create_release_candidate
    environment: Production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/checkout@v2
        with:
          repository: marvinkurock/ga
          token: ${{ secrets.API_GITHUB_TOKEN }}
          path: .github/actions
      - uses: ./.github/actions/release/
        with:
          K8S_REPO: marvinkurock/k8s
          IS_PRERELEASE: "false"
          API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
          RELEASE_FILE: ${{ env.PROD_RELEASE_FILE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #     path: app
      # - name: Install GitVersion
      #   uses: gittools/actions/gitversion/setup@v0.9.7
      #   with:
      #     versionSpec: '5.x'
      # - name: Set Version
      #   run: |
      #     dotnet-gitversion -output buildserver -verbosity Quiet
      #     echo "Version:"
      #     cat $GITHUB_ENV
      #   working-directory: app
      # - uses: actions/checkout@v2
      #   with:
      #     repository: marvinkurock/k8s
      #     path: k8s
      #     token: ${{ secrets.API_GITHUB_TOKEN }}
      # - name: retag image
      #   run: |
      #     echo "Retag Image"
      # - name: Commit Version
      #   working-directory: k8s
      #   env:
      #     GH_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      #   run: |
      #     git config user.email deployment@tqgg.de
      #     git config user.name deployment-bot
      #     git checkout -b release/$GitVersion_MajorMinorPatch
      #     sed -i "s/\(.*\):.*#\[version\]/\1: $GitVersion_MajorMinorPatch #[version]/" $PROD_RELEASE_FILE
      #     git add .
      #     git commit -m "Release: $GitVersion_MajorMinorPatch"
      #     git push --set-upstream origin release/$GitVersion_MajorMinorPatch
      #     gh pr create --title "[Release] Deployment: $GitVersion_MajorMinorPatch" --body "[Release] Deployment: $GitVersion_MajorMinorPatch"
      # - name: release
      #   uses: actions/create-release@v1
      #   id: create_release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     draft: false
      #     prerelease: false
      #     release_name: ${{ env.GitVersion_MajorMinorPatch }}
      #     tag_name: ${{ env.GitVersion_MajorMinorPatch }}
      #     body_path: app/readme.md
